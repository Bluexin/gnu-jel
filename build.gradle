plugins {
    id 'java'
    id 'maven-publish'
    id 'idea'
}

group = 'be.bluexin.jel'
version = jel_version

def generatedResourcesDir = layout.buildDirectory.dir("generated/resources")

// TODO : assess if it's worth handling the gnu.jel.debug.* stuff

tasks.register('buildTable', JavaExec) {
    group = "other"
    description = "Generate table file"
    // Only depend on compiled classes to avoid circular dependency with processResources
    dependsOn(tasks.named('compileJava'))
    // Use only compiled classes and external dependencies; exclude processed resources
    classpath = files(sourceSets.main.output.classesDirs) + configurations.runtimeClasspath
    mainClass.set("gnu.jel.TableWriter")
    // Output directory for generated resources
    args = [generatedResourcesDir.get().asFile.path]
    // Declare outputs for up-to-date checks
    outputs.dir(generatedResourcesDir)
}

// Include generated resources in the main resources
sourceSets.main.resources.srcDir(generatedResourcesDir)

// Ensure resources are generated before they are processed/packed
tasks.named('processResources') {
    dependsOn('buildTable')
}

// Keep assemble depending on generation for convenience
assemble.configure {
    dependsOn('buildTable')
}

// Ensure jar also depends on generation (for cases when jar runs without processResources)
tasks.named('jar') {
    dependsOn('buildTable')
}

publishing {
    publications {
        jel(MavenPublication) {
//            artifact releaseJar
//            artifact debugJar
//            artifact sourcesJar
//            artifact javadocJar
        }
    }

    repositories {
        def remote = System.getenv('REPO_PWD') != null
        maven {
            def remoteURL = 'https://maven.bluexin.be/repository/releases'
            def localURL = "file://${buildDir}/repo"
            url = remote ? remoteURL : localURL
            if (remote) {
                credentials(PasswordCredentials) {
                    username = 'CI'
                    password = System.getenv('REPO_PWD')
                }
            }
        }
    }
}